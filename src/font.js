/* Copyright 2022 Â© Adobe Systems */
/*{"k":"1.8.1","auto_updating":true,"last_published":"2022-04-26 07:23:12 UTC"}*/
/* eslint-disable */
(() => {
    const config = {
        a: '109286497',
        h: 'tk',
        t: 'aho4eqm',
        p: 1,
        j: '1.8.1',
        c: ['.tk-alibaba-puhuiti', '"alibaba-puhuiti",sans-serif'],
        l: 'typekit',
        type: 'dynamic',
        preview:
            'https://use.typekit.net/pf/{user}/{font_alias}/{fvd}/{format}{?subset_id,primer,token,unicode,features,gdyn,v,chunks,state,order}',
        ping: 'https://p.typekit.net/p.gif{?s,k,ht,h,f,a,js,app,e,_}',
        primer: 'https://primer.typekit.net/primer/{primer}',
        f: [
            {
                source: 'https://use.typekit.net/af/ad7f58/00000000000000007735c5be/30/{format}{?primer,unicode,gdyn,features,v,chunks,state,order,subset_id}',
                id: 45387,
                dynamic: true,
                family: 'alibaba-puhuiti',
                descriptors: {
                    display: 'auto',
                    featureSettings: '"ALL "',
                    subset: '',
                    order: '',
                    dynamic: true,
                },
            },
            {
                source: 'https://use.typekit.net/af/29a0e1/00000000000000007735c5c9/30/{format}{?primer,unicode,gdyn,features,v,chunks,state,order,subset_id}',
                id: 45389,
                dynamic: true,
                family: 'alibaba-puhuiti',
                descriptors: {
                    weight: '700',
                    display: 'auto',
                    subset: '',
                    order: '',
                    dynamic: true,
                },
            },
        ],
    };
    (function () {
        'use strict';
        let f;
        const g = [];
        function l(a) {
            g.push(a);
            if (1 == g.length) f();
        }
        function m() {
            for (; g.length; ) g[0](), g.shift();
        }
        f = () => {
            setTimeout(m);
        };
        class n {
            constructor(a) {
                this.a = p;
                this.b = void 0;
                this.f = [];
                const b = this;
                try {
                    a(
                        (a) => {
                            q(b, a);
                        },
                        (a) => {
                            r(b, a);
                        },
                    );
                } catch (c) {
                    r(b, c);
                }
            }
            g(a) {
                return this.c(void 0, a);
            }
            c(a, b) {
                var c = this;
                return new n((d, e) => {
                    c.f.push([a, b, d, e]);
                    v(c);
                });
            }
        }
        var p = 2;
        function t(a) {
            return new n((b, c) => {
                c(a);
            });
        }
        function u(a) {
            return new n((b) => {
                b(a);
            });
        }
        function q(a, b) {
            if (a.a == p) {
                if (b == a) throw new TypeError();
                let c = !1;
                try {
                    const d = b?.then;
                    if (null != b && 'object' == typeof b && 'function' == typeof d) {
                        d.call(
                            b,
                            (b) => {
                                c || q(a, b);
                                c = !0;
                            },
                            (b) => {
                                c || r(a, b);
                                c = !0;
                            },
                        );
                        return;
                    }
                } catch (e) {
                    c || r(a, e);
                    return;
                }
                a.a = 0;
                a.b = b;
                v(a);
            }
        }
        function r(a, b) {
            if (a.a == p) {
                if (b == a) throw new TypeError();
                a.a = 1;
                a.b = b;
                v(a);
            }
        }
        function v(a) {
            l(() => {
                if (a.a != p)
                    for (; a.f.length; ) {
                        var b = a.f.shift();
                        const c = b[0];
                        const d = b[1];
                        const e = b[2];
                        var b = b[3];
                        try {
                            if (0 == a.a) {
                                if ('function' == typeof c) {
                                    e(c.call(void 0, a.b));
                                } else {
                                    e(a.b);
                                }
                            } else {
                                1 == a.a &&
                                    ('function' == typeof d ? e(d.call(void 0, a.b)) : b(a.b));
                            }
                        } catch (h) {
                            b(h);
                        }
                    }
            });
        }
        function w(a) {
            return new n((b, c) => {
                function d(c) {
                    return (d) => {
                        h[c] = d;
                        e += 1;
                        if (e == a.length) b(h);
                    };
                }
                var e = 0;
                var h = [];
                if (0 == a.length) b(h);
                for (let k = 0; k < a.length; k += 1) u(a[k]).c(d(k), c);
            });
        }
        function x(a) {
            return new n((b, c) => {
                for (let d = 0; d < a.length; d += 1) u(a[d]).c(b, c);
            });
        }
        window.Promise ||
            ((window.Promise = n),
            (window.Promise.resolve = u),
            (window.Promise.reject = t),
            (window.Promise.race = x),
            (window.Promise.all = w),
            (window.Promise.prototype.then = n.prototype.c),
            (window.Promise.prototype['catch'] = n.prototype.g));
    })();

    (() => {
        function m(a, b) {
            if (-1 === a.className.split(/\s+/).indexOf(b)) a.className += ` ${b}`;
        }
        function aa(a, b) {
            if (a.className.split(/\s+/).includes(b)) {
                const c = a.className.split(/\s+/);
                c.splice(c.indexOf(b), 1);
                a.className = c.join(' ');
            }
        }
        function ba(a, b) {
            if (document.addEventListener) {
                a.addEventListener('scroll', b, !1);
            } else {
                a.attachEvent('scroll', b);
            }
        }
        function ca(a) {
            if (document.body) {
                a();
            } else if (document.addEventListener) {
                document.addEventListener('DOMContentLoaded', function c() {
                    document.removeEventListener('DOMContentLoaded', c);
                    a();
                });
            } else {
                document.attachEvent('onreadystatechange', function d() {
                    if ('interactive' == document.readyState || 'complete' == document.readyState)
                        document.detachEvent('onreadystatechange', d), a();
                });
            }
        }
        class da {
            constructor(a) {
                this.b = document.createElement('div');
                this.b.setAttribute('aria-hidden', 'true');
                this.b.appendChild(document.createTextNode(a));
                this.g = document.createElement('span');
                this.i = document.createElement('span');
                this.B = document.createElement('span');
                this.m = document.createElement('span');
                this.u = -1;
                this.g.style.cssText =
                    'max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;';
                this.i.style.cssText =
                    'max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;';
                this.m.style.cssText =
                    'max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;';
                this.B.style.cssText =
                    'display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;';
                this.g.appendChild(this.B);
                this.i.appendChild(this.m);
                this.b.appendChild(this.g);
                this.b.appendChild(this.i);
            }
        }
        function q(a, b) {
            a.b.style.cssText =
                'max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;left:-999px;white-space:nowrap;font-synthesis:none;font:' +
                b +
                ';';
        }
        function ea(a) {
            const b = a.b.offsetWidth;
            const c = b + 100;
            a.m.style.width = `${c}px`;
            a.i.scrollLeft = c;
            a.g.scrollLeft = a.g.scrollWidth + 100;
            return a.u !== b ? ((a.u = b), !0) : !1;
        }
        function ia(a, b) {
            function c() {
                const a = d;
                if (ea(a) && a.b.parentNode) b(a.u);
            }
            var d = a;
            ba(a.g, c);
            ba(a.i, c);
            ea(a);
        }
        class ja {
            constructor(a, b) {
                const c = b || {};
                this.family = a;
                this.style = c.style || 'normal';
                this.weight = c.weight || 'normal';
                this.stretch = c.stretch || 'normal';
            }
            load(a, b) {
                const c = this;
                const d = a || 'BESbswy';
                let e = 0;
                const f = b || 3e3;
                const h = new Date().getTime();
                return new Promise((a, b) => {
                    if (pa() && !oa()) {
                        const g = new Promise((a, b) => {
                            function e() {
                                if (new Date().getTime() - h >= f) {
                                    b();
                                } else {
                                    document.fonts.load(r(c, `"${c.family}"`), d).then(
                                        (b) => {
                                            if (1 <= b.length) {
                                                a();
                                            } else {
                                                setTimeout(e, 25);
                                            }
                                        },
                                        () => {
                                            b();
                                        },
                                    );
                                }
                            }
                            e();
                        });
                        const k = new Promise((a, b) => {
                            e = setTimeout(b, f);
                        });
                        Promise.race([k, g]).then(
                            () => {
                                clearTimeout(e);
                                a(c);
                            },
                            () => {
                                b(c);
                            },
                        );
                    } else
                        ca(() => {
                            function g() {
                                let b;
                                if (
                                    (b =
                                        (-1 != p && -1 != u) ||
                                        (-1 != p && -1 != z) ||
                                        (-1 != u && -1 != z))
                                )
                                    (b = p != u && p != z && u != z) ||
                                        (null === ka &&
                                            ((b = /AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(
                                                window.navigator.userAgent,
                                            )),
                                            (ka =
                                                !!b &&
                                                (536 > parseInt(b[1], 10) ||
                                                    (536 === parseInt(b[1], 10) &&
                                                        11 >= parseInt(b[2], 10))))),
                                        (b =
                                            ka &&
                                            ((p == t && u == t && z == t) ||
                                                (p == ga && u == ga && z == ga) ||
                                                (p == ha && u == ha && z == ha)))),
                                        (b = !b);
                                if (b) v.parentNode?.removeChild(v), clearTimeout(e), a(c);
                            }
                            function k() {
                                if (new Date().getTime() - h >= f) {
                                    v.parentNode?.removeChild(v), b(c);
                                    return;
                                }
                                const a = document.hidden;
                                if (!0 === a || void 0 === a)
                                    (p = l.b.offsetWidth),
                                        (u = n.b.offsetWidth),
                                        (z = w.b.offsetWidth),
                                        g();
                                e = setTimeout(k, 50);
                            }
                            var l = new da(d);
                            var n = new da(d);
                            var w = new da(d);
                            var p = -1;
                            var u = -1;
                            var z = -1;
                            var t = -1;
                            var ga = -1;
                            var ha = -1;
                            var v = document.createElement('div');
                            v.dir = 'ltr';
                            q(l, r(c, 'sans-serif'));
                            q(n, r(c, 'serif'));
                            q(w, r(c, 'monospace'));
                            v.appendChild(l.b);
                            v.appendChild(n.b);
                            v.appendChild(w.b);
                            document.body.appendChild(v);
                            t = l.b.offsetWidth;
                            ga = n.b.offsetWidth;
                            ha = w.b.offsetWidth;
                            k();
                            ia(l, (a) => {
                                p = a;
                                g();
                            });
                            q(l, r(c, `"${c.family}",sans-serif`));
                            ia(n, (a) => {
                                u = a;
                                g();
                            });
                            q(n, r(c, `"${c.family}",serif`));
                            ia(w, (a) => {
                                z = a;
                                g();
                            });
                            q(w, r(c, `"${c.family}",monospace`));
                        });
                });
            }
        }
        var ka = null;
        var la = null;
        let ma = null;
        var na = null;
        function oa() {
            if (null === la)
                if (pa() && /Apple/.test(window.navigator.vendor)) {
                    const a = /AppleWebKit\/([0-9]+)(?:\.([0-9]+))(?:\.([0-9]+))/.exec(
                        window.navigator.userAgent,
                    );
                    la = !!a && 603 > parseInt(a[1], 10);
                } else la = !1;
            return la;
        }
        function pa() {
            if (null === na) na = !!document.fonts;
            return na;
        }
        function qa() {
            if (null === ma) {
                const a = document.createElement('div');
                try {
                    a.style.font = 'condensed 100px sans-serif';
                } catch (b) {}
                ma = '' !== a.style.font;
            }
            return ma;
        }
        function r(a, b) {
            return [a.style, a.weight, qa() ? a.stretch : '', '100px', b].join(' ');
        }
        let ra = null;
        function sa() {
            if (!ra) {
                if (/MSIE|Trident/.test(navigator.userAgent))
                    return Promise.resolve(['woff', 'opentype', 'truetype']);
                const a = document.createElement('style');
                const b = document.getElementsByTagName('head')[0];
                a.appendChild(
                    document.createTextNode(
                        '@font-face{font-family:"_fff_";src:url(data:font/woff2;base64,d09GMgABAAAAAADcAAoAAAAAAggAAACWAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABk4ALAoUNAE2AiQDCAsGAAQgBSAHIBtvAciuMTaGVo8IaqBbcKPeB3CyAAIO4unr9nb72QE3p00iGQQIZcAAcAMEJOztBx7zdWVWn//BAPW1l0BN429cPrCPE75MA637gPs0DjavNxzHtWeXXErKIV3AF9TbHqCTOATL2BgjeIH30lQwSAonU1LabV8Iz12wDvgd/obV5QVxXDKvUhW1QfWNrS6HzEQJaP4tBA==) format("woff2"),url(data:application/font-woff;base64,d09GRgABAAAAAAHgAAoAAAAAAggAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAABUAAAABcAAABOBIQEIWNtYXAAAAFwAAAAJgAAACwADABzZ2x5ZgAAAaAAAAAUAAAAFAwBPQJoZWFkAAAA9AAAAC0AAAA2CHEB92hoZWEAAAEkAAAAFgAAACQMAQgDaG10eAAAAWgAAAAIAAAACAgAAABsb2NhAAABmAAAAAYAAAAGAAoAAG1heHAAAAE8AAAAEwAAACAABAACbmFtZQAAAbQAAAAeAAAAIAAjCF5wb3N0AAAB1AAAAAwAAAAgAAMAAHgBY2BkYABhb81vuvH8Nl8ZmFgYQOBCWvVrMP3VURxEczBAxBmYQAQAAFIIBgAAAHgBY2BkYGBhAAEOKAkUQQVMAAJKABkAAHgBY2BkYGBgAkIgjQ0AAAC+AAcAeAFjAIEUBkYGcoECgwILmAEiASBRAK4AAAAAAAgAAAB4AWNgYGBkYAZiBgYeBhYGBSDNAoQgvsP//xDy/0EwnwEATX4GfAAAAAAAAAAKAAAAAQAAAAAIAAQAAAEAADEBCAAEAHgBY2BgYGKQY2BmYGThZGAEshmgbCYw2wEABjMAigAAeAFjYGbACwAAfQAE) format("woff")}',
                    ),
                );
                b.appendChild(a);
                ra = new ja('_fff_', {}).load('@', 5e3).then(
                    () => {
                        const c = new da('@');
                        const d = ['opentype', 'truetype'];
                        q(c, '_fff_');
                        document.body.appendChild(c.b);
                        const e = c.b.offsetWidth;
                        200 <= e && d.unshift('woff');
                        300 == e && d.unshift('woff2');
                        b.removeChild(a);
                        document.body.removeChild(c.b);
                        return d;
                    },
                    () => ['opentype', 'truetype'],
                );
            }
            return ra;
        }
        function ta(a) {
            for (
                var b = /\burl\((\'|\"|)([^\'\"]+?)\1\)( format\((\'|\"|)([^\'\"]+?)\4\))?/g,
                    c,
                    d = [];
                (c = b.exec(a));

            )
                c[2] && d.push({ url: c[2], format: c[5] });
            return d;
        }
        class ua {
            constructor(a, b) {
                this.status = b.status;
                this.ok = (200 <= b.status && 300 > b.status) || !b.status;
                this.statusText = b.statusText;
                this.body = a;
            }
            arrayBuffer() {
                return Promise.resolve(this.body);
            }
        }
        const va = !(window.XDomainRequest && !('responseType' in XMLHttpRequest.prototype));
        function wa(a) {
            const b = {};
            return new Promise((c, d) => {
                if (va) {
                    var e = new XMLHttpRequest();
                    e.onload = () => {
                        c(
                            new ua(e.response, {
                                status: e.status,
                                statusText: e.statusText,
                            }),
                        );
                    };
                    e.onerror = () => {
                        d(new TypeError('Network request failed'));
                    };
                    e.open('GET', a);
                    e.responseType = 'arraybuffer';
                    b &&
                        Object.keys(b).forEach((a) => {
                            e.setRequestHeader(a, b[a]);
                        });
                    e.send(null);
                } else
                    (e = new XDomainRequest()),
                        e.open('GET', a.replace(/^http(s)?:/i, window.location.protocol)),
                        (e.ontimeout = () => !0),
                        (e.onprogress = () => !0),
                        (e.onload = () => {
                            c(
                                new ua(e.responseText, {
                                    status: e.status,
                                    statusText: e.statusText,
                                }),
                            );
                        }),
                        (e.onerror = () => {
                            d(new TypeError('Network request failed'));
                        }),
                        setTimeout(() => {
                            e.send(null);
                        }, 0);
            });
        }
        class xa {
            constructor(a, b, c) {
                const d = this;
                const e = c || {};
                this.source = b;
                this.i = null;
                this.b = [];
                this.L = new Promise(function (a, b) {
                    d.u = a;
                    d.m = b;
                });
                this.o = 'unloaded';
                this.g = null;
                Object.defineProperties(this, {
                    family: {
                        get() {
                            return a;
                        },
                    },
                    style: {
                        get() {
                            return e.style || 'normal';
                        },
                    },
                    weight: {
                        get() {
                            return e.weight || 'normal';
                        },
                    },
                    stretch: {
                        get() {
                            return e.stretch || 'normal';
                        },
                    },
                    display: {
                        get() {
                            return e.display || 'auto';
                        },
                    },
                    unicodeRange: {
                        get() {
                            return e.unicodeRange || 'U+0-10FFFF';
                        },
                    },
                    variant: {
                        get() {
                            return e.variant || 'normal';
                        },
                    },
                    featureSettings: {
                        get() {
                            return e.featureSettings || 'normal';
                        },
                    },
                    status: {
                        get() {
                            return this.o;
                        },
                    },
                    loaded: {
                        get() {
                            return this.L;
                        },
                    },
                });
                if ('string' === typeof b) {
                    this.b = ta(b);
                } else {
                    (this.i = b), (this.o = 'loaded'), this.u(d);
                }
            }
            load() {
                const a = this;
                if ('unloaded' === a.o)
                    (a.o = 'loading'),
                        sa()
                            .then((b) => {
                                if ((b = ya(a, b))) {
                                    wa(b)
                                        .then((a) => {
                                            if (a.ok) return a.arrayBuffer();
                                            throw a;
                                        })
                                        .then((b) => {
                                            a.i = b;
                                            a.o = 'loaded';
                                            a.u(a);
                                        })
                                        ['catch'](() => {
                                            a.o = 'error';
                                            a.m(a);
                                        });
                                } else {
                                    (a.o = 'error'), a.m(a);
                                }
                            })
                            ['catch'](() => {
                                a.o = 'error';
                                a.m(a);
                            });
                return this.L;
            }
        }
        let x = null;
        function ya(a, b) {
            for (var c = null, d = 0; d < b.length; d++)
                for (let e = 0; e < a.b.length; e++)
                    if (b[d] === a.b[e].format && null === c) {
                        c = a.b[e].url;
                        break;
                    }
            if (!c && b.length) return a.b[0].url;
            return c;
        }
        const A = document.createElement('div');
        function za(a) {
            A.style.cssText = `font:${a}`;
            if (A.style.fontFamily) {
                a: {
                    a = A.style.fontFamily;
                    for (var b = '', c = [], d = 0; d < a.length; d++) {
                        const e = a.charAt(d);
                        if ("'" === e || '"' === e) {
                            b = d + 1;
                            do
                                if (((b = a.indexOf(e, b) + 1), !b)) {
                                    a = null;
                                    break a;
                                }
                            while ('\\' === a.charAt(b - 2));
                            c.push(a.slice(d + 1, b - 1));
                            d = b - 1;
                            b = '';
                        } else if (',' === e) {
                            (b = b.trim()), '' !== b && (c.push(b), (b = ''));
                        } else {
                            b += e;
                        }
                    }
                    b = b.trim();
                    '' !== b && c.push(b);
                    a = c;
                }
                if (a)
                    return {
                        size: A.style.fontSize,
                        lineHeight: A.style.lineHeight || 'normal',
                        style: A.style.fontStyle || 'normal',
                        variant: A.style.fontVariant || 'normal',
                        weight: A.style.fontWeight || 'normal',
                        stretch: A.style.fontStretch || 'normal',
                        family: a,
                    };
            }
            return null;
        }
        class B {
            constructor() {
                this.fonts = [];
                this.o = 'loaded';
                Object.defineProperties(this, {
                    status: {
                        get() {
                            return this.o;
                        },
                    },
                    size: {
                        get() {
                            return this.fonts.length;
                        },
                    },
                });
            }
            add(a) {
                if (!this.has(a)) {
                    x || ((x = document.createElement('style')), document.head.appendChild(x));
                    let b;
                    if ('loaded' === a.o) {
                        b = new Uint8Array(a.i);
                        for (var c = '', d = 0; d < b.length; d++) c += String.fromCharCode(b[d]);
                        b = `url(data:font/opentype;base64,${btoa(c)})`;
                    } else b = a.source;
                    x.sheet.insertRule(
                        '@font-face{font-family:"' +
                            a.family +
                            '";font-style:' +
                            a.style +
                            ';font-weight:' +
                            a.weight +
                            ';font-display:' +
                            a.display +
                            ';src:' +
                            b +
                            ';}',
                        0,
                    );
                    a.g = x.sheet.cssRules[0];
                    this.fonts.push(a);
                }
            }
            delete(a) {
                const b = this.fonts.indexOf(a);
                if (-1 !== b) {
                    if (x && a.g)
                        for (var c = 0; c < x.sheet.cssRules.length; c++)
                            if (a.g === x.sheet.cssRules[c]) {
                                x.sheet.deleteRule(c);
                                a.g = null;
                                break;
                            }
                    this.fonts.splice(b, 1);
                    return !0;
                }
                return !1;
            }
            clear() {
                this.fonts = [];
            }
            has(a) {
                return -1 !== this.fonts.indexOf(a);
            }
            forEach(a) {
                var b = this;
                this.fonts.forEach(function (c, d) {
                    a(c, d, b);
                });
            }
            load(a) {
                var b = this,
                    c = Aa(this, a);
                return c
                    ? c.length
                        ? ((b.o = 'loading'),
                          Promise.all(
                              c.map(function (a) {
                                  return a.load();
                              }),
                          )
                              .then(function () {
                                  b.o = 'loaded';
                                  return c;
                              })
                              ['catch'](function () {
                                  b.o = 'loaded';
                                  return c;
                              }))
                        : Promise.resolve([])
                    : Promise.reject([]);
            }
            check(a) {
                a = Aa(this, a);
                if (a.length) {
                    for (var b = 0; b < a.length; b++) if ('loaded' !== a[b].status) return !1;
                    return !0;
                }
                return !1;
            }
        }
        function Aa(a, b) {
            function c(a) {
                return 'bold' === a ? 700 : 'normal' === a ? 400 : a;
            }
            var d = za(b);
            return d
                ? a.fonts.filter(function (a) {
                      for (var b = d.family, e = 0; e < b.length; e++)
                          if (
                              a.family === b[e] &&
                              a.style === d.style &&
                              a.stretch === d.stretch &&
                              c(a.weight) === c(d.weight)
                          )
                              return !0;
                      return !1;
                  })
                : null;
        }
        if (window.FontFace)
            (C = window.FontFace),
                (C.prototype.load = window.FontFace.prototype.load),
                (D = document.fonts);
        else {
            var C = xa;
            C.prototype.load = xa.prototype.load;
            var D = new B();
        }
        function E(a, b) {
            return (a & 65535) * b + ((((a >>> 16) * b) & 65535) << 16);
        }
        function Ba(a, b) {
            var c;
            c = E(a & 4294967295, 3432918353);
            c = E((c << 15) | (c >>> 17), 461845907);
            c ^= b || 0;
            c = E((c << 13) | (c >>> 19), 5) + 3864292196;
            c ^= 4;
            c = E(c ^ (c >>> 16), 2246822507);
            c = E(c ^ (c >>> 13), 3266489909);
            return (c ^ (c >>> 16)) >>> 0;
        }
        function Ca(a, b) {
            var c = b || 0,
                d,
                e,
                f = a.length % 4,
                h = a.length - f;
            for (e = 0; e < h; e += 4)
                (d =
                    ((a.charCodeAt(e + 0) & 4294967295) << 0) |
                    ((a.charCodeAt(e + 1) & 4294967295) << 8) |
                    ((a.charCodeAt(e + 2) & 4294967295) << 16) |
                    ((a.charCodeAt(e + 3) & 4294967295) << 24)),
                    (d = E(d, 3432918353)),
                    (d = (d << 15) | (d >>> 17)),
                    (d = E(d, 461845907)),
                    (c ^= d),
                    (c = (c << 13) | (c >>> 19)),
                    (c = E(c, 5) + 3864292196);
            d = 0;
            switch (f) {
                case 3:
                    d ^= (a.charCodeAt(e + 2) & 4294967295) << 16;
                case 2:
                    d ^= (a.charCodeAt(e + 1) & 4294967295) << 8;
                case 1:
                    (d ^= (a.charCodeAt(e + 0) & 4294967295) << 0),
                        (d = E(d, 3432918353)),
                        (d = E((d << 15) | (d >>> 17), 461845907)),
                        (c ^= d);
            }
            c ^= a.length;
            c = E(c ^ (c >>> 16), 2246822507);
            c = E(c ^ (c >>> 13), 3266489909);
            return (c ^ (c >>> 16)) >>> 0;
        }
        function Da(a, b) {
            this.b = b || Array(Math.ceil(a / 32));
            this.size = a;
            if (!b) for (var c = 0; c < this.b.length; c++) this.b[c] = 0;
        }
        Da.prototype.set = function (a) {
            if (Math.floor(a / 32 + 1) > this.b.length) throw Error('Index is out of bounds.');
            var b = Math.floor(a / 32);
            this.b[b] |= 1 << (a - 32 * b);
        };
        Da.prototype.has = function (a) {
            if (Math.floor(a / 32 + 1) > this.b.length) throw Error('Index is out of bounds.');
            var b = Math.floor(a / 32);
            return !!(this.b[b] & (1 << (a - 32 * b)));
        };
        function Ea(a, b, c) {
            this.size = a;
            this.g = b;
            this.b = new Da(a, c);
        }
        var F = [
            2449897292, 4218179547, 2675077685, 1031960064, 1478620578, 1386343184, 3194259988,
            2656050674, 3012733295, 2193273665,
        ];
        Ea.prototype.add = function (a) {
            if ('string' !== typeof a && 'number' !== typeof a)
                throw Error('Value should be a string or number.');
            for (var b = 'number' === typeof a, c = 0; c < this.g; c++)
                this.b.set(b ? Ba(a, F[c]) % this.size : Ca(a, F[c]) % this.size);
        };
        Ea.prototype.has = function (a) {
            if ('string' !== typeof a && 'number' !== typeof a)
                throw Error('Value should be a string or number.');
            for (var b = 'number' === typeof a, c = 0; c < this.g; c++)
                if (!this.b.has(b ? Ba(a, F[c]) % this.size : Ca(a, F[c]) % this.size)) return !1;
            return !0;
        };
        function Fa(a) {
            a = [a.size, a.g].concat(a.b.b);
            for (var b = '', c = 0; c < a.length; c++)
                var d = a[c],
                    b =
                        b +
                        (String.fromCharCode((d & 4278190080) >>> 24) +
                            String.fromCharCode((d & 16711680) >>> 16) +
                            String.fromCharCode((d & 65280) >>> 8) +
                            String.fromCharCode((d & 255) >>> 0));
            a = b;
            b = '';
            if (window.btoa) b = window.btoa(a);
            else
                for (
                    var e,
                        d = 0,
                        f = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
                    a.charAt(d | 0) || ((f = '='), d % 1);
                    b += f.charAt(63 & (e >> (8 - (d % 1) * 8)))
                ) {
                    c = a.charCodeAt((d += 0.75));
                    if (255 < c)
                        throw Error(
                            "'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.",
                        );
                    e = (e << 8) | c;
                }
            return b.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
        }
        function G(a, b, c, d) {
            this.unicode = a;
            this.features = b || [];
            this.b = c || null;
            this.g = d || null;
        }
        G.prototype.get = function (a) {
            var b = Ga(this),
                c;
            c = '';
            if (this.b)
                for (
                    var d = new Uint8Array(this.b.buffer, this.b.byteOffset, this.b.byteLength),
                        e = 0;
                    e < d.byteLength;
                    e++
                )
                    d[e] && (c += String.fromCharCode(d[e]));
            c = c.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
            d = Ha(this);
            return '' !== c
                ? { format: a, unicode: b, gdyn: c, v: '3' }
                : { format: a, unicode: b, features: d, v: '3' };
        };
        function Ga(a) {
            if (a.unicode.length) {
                var b = Math.min(
                        Math.ceil(
                            (Math.log(0.01) * (a.unicode.length || 1)) /
                                Math.log(1 / Math.pow(2, Math.log(2))),
                        ),
                        9586,
                    ),
                    c = new Ea(
                        b,
                        Math.max(
                            Math.min(
                                Math.round((Math.log(2) * b) / (a.unicode.length || 1)),
                                F.length,
                            ),
                            1,
                        ),
                    );
                a.unicode.forEach(function (a) {
                    c.add(a);
                });
                return Fa(c);
            }
            return 'AAAAAQAAAAEAAAAB';
        }
        function Ha(a) {
            return a.features.length
                ? a.features
                      .map(function (a) {
                          return a.trim();
                      })
                      .join(',')
                : 'NONE';
        }
        function Ia() {
            this.g = [];
            this.b = [];
            var a = 0,
                b = 2,
                c;
            a: for (; 64 > a; b++) {
                for (c = 2; c * c <= b; c++) if (!(b % c)) continue a;
                8 > a && (this.b[a] = Ja(Math.pow(b, 0.5)));
                this.g[a] = Ja(Math.pow(b, 1 / 3));
                a++;
            }
        }
        function H(a, b) {
            return (b >>> a) | (b << (32 - a));
        }
        function Ja(a) {
            return (4294967296 * (a - Math.floor(a))) | 0;
        }
        function I(a) {
            for (var b = '', c, d = 7; 0 <= d; d--)
                (c = (a >>> (4 * d)) & 15), (b += c.toString(16));
            return b;
        }
        function Ka(a) {
            this.b = a;
        }
        function J(a, b) {
            return a.b.replace(/\{([^\{\}]+)\}/g, function (a, d) {
                if ('?' == d.charAt(0)) {
                    for (var c = d.slice(1).split(','), f = [], h = 0; h < c.length; h++)
                        b.hasOwnProperty(c[h]) && f.push(c[h] + '=' + encodeURIComponent(b[c[h]]));
                    return f.length ? '?' + f.join('&') : '';
                }
                return b.hasOwnProperty(d) ? encodeURIComponent(b[d]) : '';
            });
        }
        var La = !(window.XDomainRequest && !('responseType' in XMLHttpRequest.prototype));
        function K(a, b) {
            return new Promise(function (c, d) {
                var e = b || { method: 'GET', headers: {}, body: null };
                if (La) {
                    var f = new XMLHttpRequest();
                    f.onload = function () {
                        c({
                            body: f.response,
                            status: f.status,
                            statusText: f.statusText,
                        });
                    };
                    f.onerror = function () {
                        d(Error('Network request failed'));
                    };
                    f.open(e.method, a, !0);
                    f.responseType = 'arraybuffer';
                    e.headers &&
                        Object.keys(e.headers).forEach(function (a) {
                            f.setRequestHeader(a, e.headers[a]);
                        });
                    f.send(e.body);
                } else
                    (f = new XDomainRequest()),
                        f.open(e.method, a.replace(/^http(s)?:/i, window.location.protocol)),
                        (f.ontimeout = function () {
                            return !0;
                        }),
                        (f.onprogress = function () {
                            return !0;
                        }),
                        (f.onload = function () {
                            c({
                                body: null,
                                status: f.status,
                                statusText: f.statusText,
                            });
                        }),
                        (f.onerror = function () {
                            d(Error('Network request failed'));
                        }),
                        setTimeout(function () {
                            f.send(e.body);
                        }, 0);
            });
        }
        function Ma(a, b, c) {
            this.unicode = a;
            this.features = b || [];
            this.b = c || null;
            this.g = null;
        }
        var Na = {};
        function Oa(a) {
            var b = Pa(a),
                c = new Ka(window.Typekit.config.primer);
            Na[b] ||
                (Na[b] = new Promise(function (d, e) {
                    var f = J(c, { primer: Pa(a) });
                    K(f, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: Qa(a),
                    })
                        .then(function (a) {
                            200 === a.status
                                ? d(b)
                                : e('Failed to create primer "' + f + '": ' + a.status);
                        })
                        ['catch'](function (a) {
                            e(a);
                        });
                }));
            return Na[b];
        }
        function Ra(a) {
            var b = '';
            a = new Uint8Array(a.b.buffer, a.b.byteOffset, a.b.byteLength);
            for (var c = 0; c < a.byteLength; c++) b += String.fromCharCode(a[c]);
            return btoa(b);
        }
        function Sa(a) {
            return a.features.length
                ? a.features
                      .map(function (a) {
                          return a.trim();
                      })
                      .join(',')
                : 'NONE';
        }
        function Qa(a) {
            var b = 'version=1.0&unicode=' + encodeURIComponent(a.unicode.join(','));
            return (b = a.b
                ? b + ('&dyna=' + encodeURIComponent(Ra(a)))
                : b + ('&features=' + encodeURIComponent(Sa(a))));
        }
        function Pa(a) {
            if (null === a.g) {
                var b = { version: '1.0', unicode: a.unicode.join(',') };
                a.b ? (b.dyna = Ra(a)) : (b.features = Sa(a));
                for (
                    var c = new Ia(),
                        d = JSON.stringify(b),
                        b = c.g.slice(0),
                        c = c.b.slice(0),
                        d = d + String.fromCharCode(128),
                        e = Math.ceil((d.length / 4 + 2) / 16),
                        f = Array(e),
                        h = 0;
                    h < e;
                    h++
                ) {
                    f[h] = Array(16);
                    for (var g = 0; 16 > g; g++)
                        f[h][g] =
                            (d.charCodeAt(64 * h + 4 * g) << 24) |
                            (d.charCodeAt(64 * h + 4 * g + 1) << 16) |
                            (d.charCodeAt(64 * h + 4 * g + 2) << 8) |
                            d.charCodeAt(64 * h + 4 * g + 3);
                }
                f[e - 1][14] = (8 * (d.length - 1)) / Math.pow(2, 32);
                f[e - 1][14] = Math.floor(f[e - 1][14]);
                f[e - 1][15] = (8 * (d.length - 1)) & 4294967295;
                for (var d = Array(64), k, l, t, fa, y, T, n, w, h = 0; h < e; h++) {
                    for (g = 0; 16 > g; g++) d[g] = f[h][g];
                    for (g = 16; 64 > g; g++)
                        (k = d[g - 15]),
                            (l = d[g - 2]),
                            (d[g] =
                                ((H(17, l) ^ H(19, l) ^ (l >>> 10)) +
                                    d[g - 7] +
                                    (H(7, k) ^ H(18, k) ^ (k >>> 3)) +
                                    d[g - 16]) &
                                4294967295);
                    k = c[0];
                    l = c[1];
                    t = c[2];
                    fa = c[3];
                    y = c[4];
                    T = c[5];
                    n = c[6];
                    w = c[7];
                    for (g = 0; 64 > g; g++) {
                        var p =
                                w +
                                (H(6, y) ^ H(11, y) ^ H(25, y)) +
                                ((y & T) ^ (~y & n)) +
                                b[g] +
                                d[g],
                            u = (H(2, k) ^ H(13, k) ^ H(22, k)) + ((k & l) ^ (k & t) ^ (l & t));
                        w = n;
                        n = T;
                        T = y;
                        y = (fa + p) & 4294967295;
                        fa = t;
                        t = l;
                        l = k;
                        k = (p + u) & 4294967295;
                    }
                    c[0] = (c[0] + k) & 4294967295;
                    c[1] = (c[1] + l) & 4294967295;
                    c[2] = (c[2] + t) & 4294967295;
                    c[3] = (c[3] + fa) & 4294967295;
                    c[4] = (c[4] + y) & 4294967295;
                    c[5] = (c[5] + T) & 4294967295;
                    c[6] = (c[6] + n) & 4294967295;
                    c[7] = (c[7] + w) & 4294967295;
                }
                a.g = I(c[0]) + I(c[1]) + I(c[2]) + I(c[3]) + I(c[4]) + I(c[5]) + I(c[6]) + I(c[7]);
            }
            return a.g;
        }
        function Ta(a) {
            return a
                .map(function (a) {
                    return 'U+' + a.toString(16);
                })
                .join(',');
        }
        function L(a) {
            this.b = a || [];
        }
        L.prototype.A = function () {
            for (var a = {}, b = 0; b < this.b.length; b++) a[this.b[b]] = this.b[b];
            return Object.keys(a)
                .map(function (b) {
                    return a[b];
                })
                .sort(function (a, b) {
                    return a - b;
                });
        };
        function Ua(a, b) {
            for (var c = {}, d = new L(), e = 0; e < a.b.length; e++) c[a.b[e]] = !0;
            for (e = 0; e < b.b.length; e++) c[b.b[e]] || d.b.push(b.b[e]);
            return d;
        }
        function Va(a, b) {
            for (var c = {}, d = new L(), e = 0; e < a.b.length; e++) c[a.b[e]] = !0;
            for (e = 0; e < b.b.length; e++) c[b.b[e]] && d.b.push(b.b[e]);
            return d;
        }
        function M(a, b) {
            var c = new L();
            c.b = a.b.concat(b.b);
            return c;
        }
        function N(a) {
            a = a.split(/\s*,\s*/);
            for (var b = [], c = 0; c < a.length; c++) {
                var d = /^(u\+([0-9a-f?]{1,6})(?:-([0-9a-f]{1,6}))?)$/i.exec(a[c]),
                    e;
                if (d)
                    if (
                        (-1 !== d[2].indexOf('?')
                            ? ((e = parseInt(d[2].replace('?', '0'), 16)),
                              (d = parseInt(d[2].replace('?', 'f'), 16)))
                            : ((e = parseInt(d[2], 16)), (d = d[3] ? parseInt(d[3], 16) : e)),
                        e !== d)
                    )
                        for (; e <= d; e++) b.push(e);
                    else b.push(e);
            }
            return new L(b);
        }
        function O(a, b) {
            this.g = a;
            this.b = b || 0;
        }
        O.prototype.read = function (a, b) {
            var c = a.read(this.g, b || this.b);
            b || (this.b += a.w);
            return c;
        };
        function Wa(a, b, c) {
            for (var d = a.b, e = [], f = 0; f < c; f += 1) e.push(b.read(a.g, d)), (d += b.w);
            a.b += b.w * c;
            return e;
        }
        var Xa = {
                w: 1,
                read: function (a, b) {
                    return a.getUint8(b || 0);
                },
            },
            P = {
                w: 2,
                read: function (a, b) {
                    return a.getUint16(b || 0);
                },
            },
            Q = {
                w: 4,
                read: function (a, b) {
                    return a.getUint32(b || 0);
                },
            },
            Ya = {
                w: 4,
                read: function (a, b) {
                    return a.getUint32(b || 0);
                },
            };
        function R(a) {
            return a % 4 ? a + (4 - (a % 4)) : a;
        }
        function S(a, b) {
            var c = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
            new Uint8Array(b.buffer, b.byteOffset, b.byteLength).set(c, 0);
        }
        function U(a) {
            var b = 0,
                c;
            for (c in a) b += a[c].w;
            return {
                w: b,
                read: function (b, c) {
                    var d = c || 0,
                        e = {},
                        g;
                    for (g in a) (e[g] = a[g].read(b, d)), (d += a[g].w);
                    return e;
                },
            };
        }
        function Za(a) {
            for (var b = new Uint32Array(4), c = 0; c < a.byteLength; c += 4)
                b[0] += a.getUint32(c);
            return b[0];
        }
        var V = U({ type: Q, O: P, B: P, i: P, u: P }),
            W = U({ tag: Ya, b: Q, offset: Q, length: Q });
        function $a(a) {
            this.arrayBuffer = a;
            this.u = new O(new DataView(a));
            this.m = [];
            this.i = [];
            this.g = [];
            this.b = {};
            a = this.u.read(V);
            if (1330926671 == a.type || 65536 == a.type) {
                a = Wa(this.u, W, a.O);
                for (var b = 0; b < a.length; b++) {
                    var c = a[b];
                    this.g.push(c.tag);
                    this.b[c.tag] = new DataView(this.arrayBuffer, c.offset, R(c.length));
                    this.m[b] = c.length;
                    this.i[b] = c.offset;
                }
            } else throw Error('Font data is invalid');
        }
        function ab(a, b) {
            for (var c = [], d = V.w + W.w * a.g.length, e = 0; e < a.g.length; e++) {
                var f = a.g[e],
                    h = b.g[f] || null;
                if (h) {
                    for (var f = R(h.length) - R(a.m[e]), g = 0; g < a.g.length; g++)
                        e !== g && a.i[g] > a.i[e] && (a.i[g] += f);
                    a.m[e] = h.length;
                }
                d += R(a.m[e]);
            }
            d = new ArrayBuffer(d);
            S(new DataView(a.arrayBuffer, 0, V.w), new DataView(d, 0, V.w));
            for (e = 0; e < a.g.length; e++) {
                f = a.g[e];
                if ((h = b.g[f] || null))
                    for (
                        1668112752 !== f &&
                            1195661646 !== f &&
                            S(a.b[f], new DataView(d, a.i[e], R(a.m[e]))),
                            a.b[f] = new DataView(d, a.i[e], R(a.m[e])),
                            h = h.K,
                            g = 0;
                        g < h.length;
                        g++
                    )
                        h[g].apply(a.b[f]);
                else
                    S(a.b[f], new DataView(d, a.i[e], R(a.m[e]))),
                        (a.b[f] = new DataView(d, a.i[e], R(a.m[e])));
                1751474532 === f && a.b[f].setUint32(8, 0);
                1330851634 === f && a.b[f].setUint16(8, 0);
                c[e] = Za(a.b[f]);
            }
            g = new DataView(d, V.w, W.w * a.g.length);
            for (e = 0; e < a.g.length; e++)
                (f = a.g[e]),
                    g.setUint32(e * W.w + 0, f),
                    g.setUint32(e * W.w + 4, c[e]),
                    g.setUint32(e * W.w + 8, a.i[e]),
                    g.setUint32(e * W.w + 12, a.m[e]);
            c = 2981146554 - Za(new DataView(d));
            a.b[1751474532].setUint32(8, c);
            a.arrayBuffer = d;
        }
        function bb(a, b) {
            this.tag = a;
            this.length = b;
            this.K = [];
        }
        function cb(a, b, c) {
            this.type = a;
            this.offset = b;
            this.b = c;
        }
        var db = U({ offset: Q, J: Q, P: Q });
        cb.prototype.apply = function (a) {
            if (1 === this.type || 2 === this.type)
                S(this.b, new DataView(a.buffer, a.byteOffset + this.offset, this.b.byteLength));
            else if (3 === this.type) {
                var b = this.b.getUint32(0),
                    c = new DataView(
                        a.buffer,
                        a.byteOffset + this.offset,
                        a.byteLength - this.offset,
                    ),
                    d = new DataView(
                        a.buffer,
                        a.byteOffset + this.offset - b,
                        a.byteLength - this.offset,
                    );
                S(c, d);
            } else if (4 === this.type)
                for (
                    var c = new O(this.b), e = Wa(c, db, this.b.byteLength / db.w), b = 0;
                    b < e.length;
                    b++
                )
                    (c = new DataView(a.buffer, a.byteOffset + e[b].offset, e[b].J)),
                        (d = new DataView(a.buffer, a.byteOffset + e[b].offset + e[b].P, e[b].J)),
                        S(c, d);
            else if (5 === this.type)
                for (c = new O(this.b); c.b < this.b.byteLength; )
                    for (d = c.read(P), e = c.read(P), b = 0; b < e; b++)
                        for (var f = c.read(Q), h = c.read(Q); f < h; )
                            a.setUint16(f, a.getUint16(f) + d), (f += 2);
        };
        function eb(a) {
            this.b = new O(new DataView(a));
            this.g = {};
            this.i = [];
            this.status = this.b.read(Xa);
            if (0 === this.status) {
                this.b.b = 10;
                for (var b = Wa(this.b, fb, this.b.read(P)), c = 0; c < b.length; c++) {
                    var d = new bb(b[c].tag, b[c].length);
                    this.i.push(d);
                    this.g[b[c].tag] = d;
                }
                b = this.b.read(P);
                for (c = 0; c < b; c++)
                    for (var e = this.b.read(gb), d = this.g[e.tag], f = 0; f < e.N; f++) {
                        var h = this.b.read(hb),
                            g = new DataView(a, this.b.b, h.length);
                        d.K.push(new cb(h.type, h.offset, g));
                        this.b.b += h.length;
                    }
            }
        }
        function ib() {
            var a = new Uint8Array(new ArrayBuffer(1));
            a[0] = 1;
            return new eb(a.buffer);
        }
        var fb = U({ tag: Ya, g: Q, offset: Q, length: Q }),
            gb = U({ tag: Ya, F: Xa, m: Q, N: P }),
            hb = U({ type: Xa, offset: Q, length: Q });
        function jb(a, b) {
            return new Promise(function (c, d) {
                var e = J(a, b.get('m'));
                if (e.length <= kb)
                    K(e)
                        .then(function (a) {
                            200 === a.status
                                ? c(a.body)
                                : d(Error('Invalid fetch response: "' + e + '": ' + a.status));
                        })
                        ['catch'](function () {
                            d(Error('Failed to fetch: "' + e + '"'));
                        });
                else {
                    var f = new Ma(b.unicode, b.features, b.g),
                        h = Pa(f),
                        g = J(a, { format: 'm', primer: h });
                    K(g)
                        .then(function (a) {
                            200 === a.status
                                ? c(a.body)
                                : 404 === a.status
                                ? Oa(f)
                                      .then(function () {
                                          K(g)
                                              .then(function (a) {
                                                  200 === a.status
                                                      ? c(a.body)
                                                      : d(
                                                            Error(
                                                                'Invalid fetch response after creating primer "' +
                                                                    g +
                                                                    '": ' +
                                                                    a.status,
                                                            ),
                                                        );
                                              })
                                              ['catch'](function () {
                                                  d(Error('Failed to fetch: "' + g + '"'));
                                              });
                                      })
                                      ['catch'](function () {
                                          d(Error('Failed to create primer "' + h + '"'));
                                      })
                                : d(Error('Invalid fetch response: "' + g + '": ' + a.status));
                        })
                        ['catch'](function () {
                            d(Error('Failed to fetch: "' + g + '"'));
                        });
                }
            });
        }
        var kb = 4096;
        function lb(a) {
            this.i = null;
            this.C = a;
            this.b = null;
            this.u = Promise.resolve();
            this.B = [];
            this.g = null;
        }
        lb.prototype.load = function () {
            var a = this.C,
                b = this;
            b.i ||
                ((a.o = 'loading'),
                (b.i = new Promise(function (c, d) {
                    var e = new G(a.unicode.A(), a.features.A());
                    jb(a.url, e)
                        .then(function (e) {
                            b.b = new $a(e);
                            ab(b.b, ib());
                            b.g = new C(a.family, new DataView(b.b.arrayBuffer).buffer, X(a));
                            b.g
                                .load()
                                .then(function () {
                                    a.o = 'loaded';
                                    c(a);
                                })
                                ['catch'](function (b) {
                                    a.o = 'error';
                                    d(b);
                                });
                        })
                        ['catch'](function (b) {
                            a.o = 'error';
                            d(b);
                        });
                })));
            return b.i;
        };
        lb.prototype.m = function () {
            return this.g;
        };
        lb.prototype.F = function (a) {
            var b = this.C,
                c = this;
            c.B.push(a);
            c.u = c.u.then(function () {
                var a = N(c.B.join(','));
                c.B = [];
                var e = Ua(b.unicode, a);
                if (!e.b.length) return Promise.resolve();
                b.unicode = M(b.unicode, e);
                return 'unloaded' === b.o
                    ? Promise.resolve()
                    : c.load().then(function () {
                          var a = c.b.b[1195661646],
                              d = c.b.b[1146703425];
                          if (!a || !d)
                              return Promise.reject(
                                  Error(
                                      'Font "' + b.family + '" does not contain DYNA/GDYN table.',
                                  ),
                              );
                          a = new G(e.A(), null, a, d);
                          return jb(b.url, a).then(function (a) {
                              a = new eb(a);
                              return 0 === a.status
                                  ? (ab(c.b, a),
                                    (c.g = new C(
                                        b.family,
                                        new DataView(c.b.arrayBuffer).buffer,
                                        X(b),
                                    )),
                                    D.add(c.g),
                                    c.g.load())
                                  : Promise.resolve();
                          });
                      });
            });
            return c.u;
        };
        function mb(a) {
            if (6 < a.length) {
                var b = new DataView(a.buffer),
                    c = b.getUint8(0),
                    d = b.getUint8(1),
                    b = b.getUint32(2);
                if (1 === d) {
                    a = new Uint8Array(a.buffer, 6);
                    a = new DataView(a.buffer, a.byteOffset, a.byteLength);
                    for (var d = [], e = 0; e < a.byteLength; ) {
                        var f = a.getUint16(e);
                        if ((0 <= f && 55295 >= f) || (57344 <= f && 65535 >= f))
                            d.push(f), (e += 2);
                        else if (55296 === (f & 63488))
                            (f = ((f & 1023) << 10) + (a.getUint16(e + 2) & 1023) + 65536),
                                d.push(f),
                                (e += 4);
                        else throw Error('Failed to decode: ' + f);
                    }
                    if (d.length !== b)
                        throw Error('Number of codepoints in header does not match data.');
                    return { version: c, H: d };
                }
                throw Error('Invalid encoding type: ' + d);
            }
            throw Error('Invalid ordering data.');
        }
        function nb(a) {
            return Math.log2 ? Math.log2(a) : Math.log(a) / Math.LN2;
        }
        function ob(a) {
            this.size = 64;
            this.i = a;
            a = Math.ceil(a.length / 64);
            a--;
            a |= a >> 1;
            a |= a >> 2;
            a |= a >> 4;
            a |= a >> 8;
            a |= a >> 16;
            this.b = ++a;
            this.u = 1 === this.b ? 0 : Math.floor(nb(this.b + 1));
            this.g = Math.pow(2, this.u + 1) - 1;
            this.m = {};
            for (a = 0; a < this.b; a++)
                for (var b = a * this.size, c = Math.min(this.i.length, b + this.size); b < c; b++)
                    this.m[this.i[b]] = a + (this.g - this.b);
        }
        function pb(a, b) {
            for (var c = {}, d = 0; d < b.length; d++) {
                var e = b[d];
                a.m.hasOwnProperty(e) && ((e = a.m[e]), (c[e] = e));
            }
            var d = [],
                f;
            for (f in c) d.push(c[f]);
            return d.sort(function (a, b) {
                return a - b;
            });
        }
        function qb(a, b) {
            for (var c = [], d = 0; d < b.length; d++) {
                var e = b[d];
                if (e < a.g)
                    var f = Math.pow(2, Math.floor(nb(e + 1))),
                        h = (a.b / f) * a.size,
                        e = e - f + 1,
                        f = e * h,
                        c = c.concat(
                            a.i.slice(f, f + Math.max(0, Math.min(a.i.length, f + h) - e * h)),
                        );
            }
            return c.sort(function (a, b) {
                return a - b;
            });
        }
        function rb(a, b, c) {
            c = c || 0.6;
            var d = pb(a, b);
            b = [];
            for (var e = 0; e < a.g; e++) b[e] = e < a.g - a.b ? null : -1 !== d.indexOf(e) ? 1 : 0;
            for (d = a.u; 0 < d; d--)
                for (var f = Math.pow(2, d), e = 0; e < f; e++) {
                    var h = Math.pow(2, d) + e - 1,
                        g = Math.floor((h - 1) / 2);
                    b[g] = null === b[g] ? b[h] : b[g] + b[h];
                }
            e = [];
            for (f = [0]; f.length; )
                (h = f.pop()),
                    h >= a.g ||
                        ((d = Math.floor(nb(h + 1))),
                        b[h] / (a.b / Math.pow(2, d)) >= c
                            ? e.push(h)
                            : (f.push(2 * h + 1), f.push(2 * h + 2)));
            return e.sort(function (a, b) {
                return a - b;
            });
        }
        function sb(a, b) {
            this.u = a;
            this.B = null;
            this.C = Promise.resolve(a);
            this.G = [];
            this.b = null;
            var c = mb(
                new Uint8Array(
                    atob(b)
                        .split('')
                        .map(function (a) {
                            return a.charCodeAt(0);
                        }),
                ),
            );
            this.I = c.H;
            this.M = c.version;
            this.H = new L(this.I);
            this.version = c.version;
            this.g = new ob(this.I);
            this.i = null;
        }
        sb.prototype.m = function () {
            return this.b;
        };
        sb.prototype.load = function () {
            var a = this.u,
                b = this;
            this.B ||
                ((a.o = 'loading'),
                (this.B = new Promise(function (c, d) {
                    var e = a.unicode.A(),
                        f = [];
                    e.length ? (f = rb(b.g, e)) : (f = [0]);
                    e = qb(b.g, f);
                    a.unicode = M(a.unicode, new L(e));
                    tb(b, f)
                        .then(function (e) {
                            b.i = new $a(e);
                            ab(b.i, ib());
                            b.b = new C(a.family, new DataView(b.i.arrayBuffer).buffer, X(a));
                            b.b
                                .load()
                                .then(function () {
                                    a.o = 'loaded';
                                    c(a);
                                })
                                ['catch'](function (b) {
                                    a.o = 'error';
                                    d(b);
                                });
                        })
                        ['catch'](function (b) {
                            a.o = 'error';
                            d(b);
                        });
                })));
            return this.B;
        };
        sb.prototype.F = function (a) {
            var b = this,
                c = this.u;
            b.G.push(a);
            b.C = b.C.then(function () {
                var a = N(b.G.join(','));
                b.G = [];
                a = Va(b.H, a);
                a = Ua(c.unicode, a);
                if (!a.b.length) return Promise.resolve(c);
                var e = rb(b.g, c.unicode.A(), 1),
                    f = rb(b.g, a.A()),
                    a = qb(b.g, f);
                c.unicode = M(c.unicode, new L(a));
                return 'unloaded' === c.o
                    ? Promise.resolve(c)
                    : b.load().then(function () {
                          return tb(b, f, e).then(function (a) {
                              a = new eb(a);
                              return 0 === a.status
                                  ? (ab(b.i, a),
                                    (b.b = new C(
                                        c.family,
                                        new DataView(b.i.arrayBuffer).buffer,
                                        X(c),
                                    )),
                                    D.add(b.b),
                                    b.b.load())
                                  : Promise.resolve();
                          });
                      });
            });
            return b.C;
        };
        function tb(a, b, c) {
            var d = a.u;
            return new Promise(function (e, f) {
                var h = {
                    format: 'm',
                    features: ub(d),
                    chunks: b.join('.'),
                    order: a.M,
                    v: '4',
                };
                c && (h.state = c.join('.'));
                var g = J(d.url, h);
                K(g)
                    .then(function (a) {
                        200 === a.status
                            ? e(a.body)
                            : f(Error('Invalid fetch response: "' + g + '": ' + a.status));
                    })
                    ['catch'](function () {
                        f(Error('Failed to fetch: "' + g + '"'));
                    });
            });
        }
        function vb(a) {
            a = document.createTreeWalker(a, NodeFilter.SHOW_ELEMENT, null, !1);
            var b = [];
            do {
                var c = a.currentNode;
                if (
                    c &&
                    'SCRIPT' !== c.nodeName &&
                    'STYLE' !== c.nodeName &&
                    'NOSCRIPT' !== c.nodeName &&
                    'TEMPLATE' !== c.nodeName &&
                    'LINK' !== c.nodeName &&
                    'TITLE' !== c.nodeName
                ) {
                    for (var d = c.childNodes, e = 0; e < d.length; e++)
                        d[e].nodeType !== Node.TEXT_NODE ||
                            /^\s*$/.test(d[e].nodeValue) ||
                            b.push(d[e].nodeValue);
                    'INPUT' === c.nodeName &&
                        'hidden' !== c.type &&
                        'password' !== c.type &&
                        b.push(c.value);
                    'TEXTAREA' === c.nodeName && b.push(c.value);
                }
            } while (a.nextNode());
            a = b.join('');
            b = new L();
            for (c = 0; c < a.length; c++)
                (d = a.charCodeAt(c)),
                    55296 === (d & 63488) && c < a.length
                        ? ((e = a.charCodeAt(c + 1)),
                          56320 === (e & 64512)
                              ? b.b.push(((d & 1023) << 10) + (e & 1023) + 65536)
                              : b.b.push(d),
                          c++)
                        : b.b.push(d);
            return b.A();
        }
        function wb(a, b) {
            this.b = a;
            this.m = b;
            this.i = null;
            xb &&
                (this.i = new MutationObserver(function (a) {
                    for (var c = [], e = 0; e < a.length; e++)
                        if (
                            a[e].addedNodes.length ||
                            'characterData' === a[e].type ||
                            'attributes' === a[e].type
                        ) {
                            var f = a[e].target;
                            3 === f.nodeType && (f = f.parentNode);
                            f && c.push(f);
                        }
                    c.length && b(c);
                }));
        }
        var xb = !!window.MutationObserver;
        wb.prototype.g = function (a) {
            a.target && ((a = a.target), 3 === a.nodeType && (a = a.parentNode), this.m([a]));
        };
        function yb(a) {
            xb
                ? a.i.observe(a.b, {
                      attributes: !0,
                      characterData: !0,
                      subtree: !0,
                      childList: !0,
                  })
                : (a.b.addEventListener('DOMAttrModified', a.g.bind(a), !1),
                  a.b.addEventListener('DOMNodeInserted', a.g.bind(a), !1),
                  a.b.addEventListener('DOMCharacterDataModified', a.g.bind(a), !1));
        }
        function zb(a) {
            var b = document.body,
                c = this;
            this.cache = {};
            this.b = new wb(b, function (b) {
                var d = [];
                b.forEach(function (a) {
                    vb(a).forEach(function (a) {
                        c.cache[a] || (d.push(a), (c.cache[a] = !0));
                    });
                });
                d.length && a(d);
            });
        }
        function Ab(a) {
            this.g = a || {};
            this.b = document.documentElement;
        }
        Ab.prototype.inactive = function () {
            aa(this.b, 'wf-loading');
            m(this.b, 'wf-inactive');
            Y(this, 'inactive');
        };
        function Bb(a) {
            aa(a.b, 'wf-loading');
            m(a.b, 'wf-active');
            Y(a, 'active');
        }
        Ab.prototype.loading = function () {
            m(this.b, 'wf-loading');
            Y(this, 'loading');
        };
        function Cb(a, b) {
            aa(a.b, Z(b, 'loading'));
            m(a.b, Z(b, 'inactive'));
            Y(a, 'fontinactive', b);
        }
        function Db(a, b) {
            m(a.b, Z(b, 'loading'));
            Y(a, 'fontloading', b);
        }
        function Z(a, b) {
            return 'wf-' + a.family + '-' + Eb(a) + '-' + b;
        }
        function Y(a, b, c) {
            if (a.g[b])
                try {
                    if (c) a.g[b](c.family, Eb(c));
                    else a.g[b]();
                } catch (d) {
                    console.error('Typekit: Error in "' + b + '" callback', d);
                }
        }
        function Fb(a) {
            a = (a || '').split(/\s*,\s*/);
            for (var b = {}, c = 0; c < a.length; c++) {
                var d = /^"([\u0020-\u007e]{1,4})"(?:\s+(\d+|on|off))?$/i.exec(a[c]);
                if (d)
                    if (d[2]) {
                        var e = d[2].replace('on', '1').replace('off', '0');
                        b[d[1]] = parseInt(e, 10);
                    } else b[d[1]] = 1;
            }
            return b;
        }
        function Gb(a) {
            this.b = a || {};
        }
        Gb.prototype.A = function () {
            var a = this,
                b = [];
            Object.keys(this.b).forEach(function (c) {
                a.b[c] && b.push(c);
            });
            return b;
        };
        function Hb(a) {
            a = (a || '').split(/\s*,\s*/);
            for (var b = {}, c = 0; c < a.length; c++) {
                var d = /^([\u0020-\u007e]{1,4})$/i.exec(a[c]);
                d && (b[d[1]] = 1);
            }
            return new Gb(b);
        }
        function Ib(a) {
            this.g = a;
            this.i = null;
            this.u = Promise.resolve(a);
            this.B = [];
            var b = new G(a.unicode.A(), a.features.A());
            this.b = new C(a.family, Jb(this, b), X(a));
        }
        function Jb(a, b) {
            var c = a.g,
                d = b.get('l'),
                e = b.get('d'),
                f = b.get('m');
            c.variable &&
                (delete d.unicode,
                delete d.features,
                (d.subset_id = 4),
                delete e.unicode,
                delete e.features,
                (e.subset_id = 4),
                delete f.unicode,
                delete f.features,
                (f.subset_id = 4));
            return (
                'url(' +
                J(c.url, d) +
                ') format("woff2"),url(' +
                J(c.url, e) +
                ') format("woff"),url(' +
                J(c.url, f) +
                ') format("opentype")'
            );
        }
        Ib.prototype.m = function () {
            return this.b;
        };
        Ib.prototype.load = function () {
            var a = this.g,
                b = this;
            this.i ||
                ((a.o = 'loading'),
                (this.i = new Promise(function (c, d) {
                    b.b
                        .load()
                        .then(function () {
                            a.o = 'loaded';
                            c(a);
                        })
                        ['catch'](function (b) {
                            a.o = 'error';
                            d(b);
                        });
                })));
            return this.i;
        };
        Ib.prototype.F = function (a) {
            var b = this,
                c = this.g;
            b.B.push(a);
            b.u = b.u.then(function () {
                var a = N(b.B.join(','));
                b.B = [];
                a = Ua(c.unicode, a);
                if (!a.b.length) return Promise.resolve(c);
                c.unicode = M(c.unicode, a);
                return 'unloaded' === c.o
                    ? Promise.resolve(c)
                    : b.load().then(function () {
                          var a = new G(c.unicode.A(), c.features.A());
                          b.b = new C(c.family, Jb(b, a), X(c));
                          D.add(b.b);
                          return b.b.load().then(function () {
                              return c;
                          });
                      });
            });
            return b.u;
        };
        var Kb = !!window.ArrayBuffer;
        function Lb(a, b, c) {
            var d = c || {};
            this.url = new Ka(b);
            this.unicode = N(d.unicodeRange || d.unicode || '');
            this.features = new Gb(Fb(d.featureSettings || ''));
            d.features && (this.features = Hb(d.features));
            delete d.featureSettings;
            this.o = 'unloaded';
            Object.defineProperties(this, {
                family: {
                    get: function () {
                        return a.replace(/['"]/g, '');
                    },
                },
                style: {
                    get: function () {
                        return d.style || 'normal';
                    },
                },
                weight: {
                    get: function () {
                        return d.weight || 'normal';
                    },
                },
                stretch: {
                    get: function () {
                        return d.stretch || 'normal';
                    },
                },
                display: {
                    get: function () {
                        return d.display || 'auto';
                    },
                },
                unicodeRange: {
                    get: function () {
                        var a = this.unicode.A();
                        return a.length ? Ta(a) : 'U+0-10ffff';
                    },
                },
                featureSettings: {
                    get: function () {
                        var a = this.features.A();
                        return a.length ? a.join(',') : 'normal';
                    },
                },
                status: {
                    get: function () {
                        return this.o;
                    },
                },
                dynamic: {
                    get: function () {
                        return d.dynamic || !1;
                    },
                },
                variable: {
                    get: function () {
                        return d.variable || !1;
                    },
                },
            });
            b = null;
            this.variable
                ? (b = new Ib(this))
                : Kb && this.dynamic
                ? d.order
                    ? (b = new sb(this, d.order))
                    : (b = new lb(this))
                : (b = new Ib(this));
            this.b = b;
        }
        function X(a) {
            return {
                style: a.style,
                weight: a.weight,
                stretch: a.stretch,
                unicodeRange: a.unicodeRange,
                display: a.display,
            };
        }
        function Eb(a) {
            var b = a.weight.toString();
            return a.style[0] + ('b' === b[0] ? '7' : 'n' === b[0] ? '4' : b[0]);
        }
        function ub(a) {
            a = a.features.A();
            return a.length
                ? a
                      .map(function (a) {
                          return a.trim();
                      })
                      .join(',')
                : 'NONE';
        }
        Lb.prototype.load = function () {
            return this.b.load();
        };
        Lb.prototype.update = function (a) {
            return this.b.F(a);
        };
        function Mb() {
            this.fonts = [];
            Object.defineProperties(this, {
                status: {
                    get: function () {
                        for (var a = 0; a < this.fonts.length; a++)
                            if ('loading' === this.fonts[a].status) return 'loading';
                        return 'loaded';
                    },
                },
                size: {
                    get: function () {
                        return this.fonts.length;
                    },
                },
            });
        }
        Mb.prototype.has = function (a) {
            return -1 !== this.fonts.indexOf(a);
        };
        Mb.prototype.add = function (a) {
            if (!this.has(a)) {
                var b = a.b.m();
                b && D.add(b);
                this.fonts.push(a);
            }
            return this;
        };
        Mb.prototype['delete'] = function (a) {
            var b = this.fonts.indexOf(a);
            return -1 !== b && (this.fonts.splice(b, 1), (a = a.b.m())) ? D['delete'](a) : !1;
        };
        Mb.prototype.forEach = function (a) {
            var b = this;
            this.fonts.forEach(function (c, d) {
                a(c, d, b);
            });
        };
        function Nb(a) {
            this.url = new Ka(a.ping);
            this.i = a.p;
            this.g = a.h;
            this.b = a.a;
            this.u = a.t;
            this.version = a.j;
            this.m = window.location.hostname;
            this.app = a.l || '';
        }
        function Ob(a, b) {
            b.length &&
                K(
                    J(a.url, {
                        s: a.i,
                        k: a.u,
                        ht: a.g,
                        h: a.m,
                        f: b.join('.'),
                        a: a.b,
                        js: a.version,
                        app: a.app,
                        e: 'js',
                        _: Date.now(),
                    }),
                );
        }
        function Pb(a) {
            this.g = new L();
            this.b = N('U+20-7E');
            a && (this.b = M(this.b, a));
        }
        Pb.prototype.set = function (a) {
            this.g = M(this.g, a);
        };
        Pb.prototype.get = function () {
            return M(this.b, this.g);
        };
        function Qb(a) {
            this.D = [];
            this.fonts = new Mb();
            this.cache = new Pb();
            this.ping = new Nb(a);
            this.b = a.c;
            a.f &&
                (a.f.forEach(function (a) {
                    this.D.push(new Lb(a.family, a.source, a.descriptors));
                }, this),
                a.ping &&
                    Ob(
                        this.ping,
                        a.f.map(function (a) {
                            return a.id;
                        }),
                    ));
        }
        function Rb(a) {
            a.D.forEach(function (b) {
                b.dynamic && b.update(Ta(a.cache.get().A()));
            });
        }
        function Sb(a) {
            if (a.b && a.b.length) {
                for (var b = document.createElement('style'), c = '', d = 0; d < a.b.length; d += 2)
                    c += a.b[d] + '{font-family:' + a.b[d + 1] + ';}';
                b.textContent = c;
                document.head.appendChild(b);
            }
        }
        Qb.prototype.load = function (a) {
            var b = this,
                c = new Ab(a);
            c.loading();
            ca(function () {
                b.cache.set(new L(vb(document.body)));
                yb(
                    new zb(function (a) {
                        b.cache.set(new L(a));
                        Rb(b);
                    }).b,
                );
                Promise.all(
                    b.D.map(function (a) {
                        Db(c, a);
                        return a.dynamic
                            ? a
                                  .update(Ta(b.cache.get().A()))
                                  .then(function () {
                                      return a.load();
                                  })
                                  ['catch'](function (b) {
                                      Cb(c, a);
                                      throw b;
                                  })
                            : a.load()['catch'](function (b) {
                                  Cb(c, a);
                                  throw b;
                              });
                    }),
                )
                    .then(function () {
                        b.D.map(function (a) {
                            aa(c.b, Z(a, 'loading'));
                            m(c.b, Z(a, 'active'));
                            Y(c, 'fontactive', a);
                            b.fonts.add(a);
                        });
                        Bb(c);
                    })
                    ['catch'](function () {
                        c.inactive();
                    });
            });
            Sb(b);
        };
        var Tb = new Qb(config);
        window.Typekit = {};
        window.Typekit.config = config;
        window.Typekit.load = Tb.load.bind(Tb);
        window.Typekit.fonts = Tb.fonts;
        window.Typekit.kit = Tb.D;
        window.Typekit.Font = function (a, b, c) {
            var d = window.Typekit.user,
                e = window.Typekit.token,
                f = c || {},
                h = (f.style || 'normal').toString(),
                f = (f.weight || 'normal').toString();
            /^(normal|italic|oblique)$/.test(h) || (h = 'normal');
            /^(([1-9]00)|normal|bold)$/.test(f) || (f = '400');
            h = h[0] + ('b' === f[0] ? '7' : 'n' === f[0] ? '4' : f[0]);
            b =
                config.preview
                    .replace('{user}', encodeURIComponent(d))
                    .replace('{font_alias}', encodeURIComponent(b))
                    .replace('{fvd}', encodeURIComponent(h)) +
                '&token=' +
                encodeURIComponent(e);
            return new Lb(a, b, c);
        };
    })();
})();
